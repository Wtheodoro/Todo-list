{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","input","setInput","inputRef","useRef","useEffect","current","focus","className","onSubmit","e","preventDefault","id","Math","floor","random","text","type","placeholder","value","name","onChange","target","ref","Todo","todos","completeTodo","removeTodo","updateTodo","edit","setEdit","map","todo","index","isComplete","key","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAiDeA,MA9Cf,SAAkBC,GAAQ,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,KAGfC,EAAWC,iBAAO,IAwBxB,OAtBAC,qBAAW,WACPF,EAASG,QAAQC,WAsBjB,0BAAMC,UAAU,YAAYC,SAdX,SAAAC,GACjBA,EAAEC,iBAGFZ,EAAMU,SAAS,CAEXG,GAAIC,KAAKC,MAAoB,IAAdD,KAAKE,UACpBC,KAAMf,IAGVC,EAAS,MAML,2BACAe,KAAK,OACLC,YAAY,sBACZC,MAAOlB,EACPmB,KAAK,OACLZ,UAAU,aACVa,SA3Ba,SAAAX,GACjBR,EAASQ,EAAEY,OAAOH,QA2BdI,IAAKpB,IAGL,4BAAQK,UAAU,eAAlB,e,cCAGgB,MAtCf,YAAgE,IAAhDC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAAc,EACnC5B,mBAAS,CAC7BY,GAAI,KACJO,MAAO,KAHgD,mBACpDU,EADoD,KAC9CC,EAD8C,KAc3D,OAAID,EAAKjB,GACE,kBAAC,EAAD,CAAUiB,KAAMA,EAAMpB,SATZ,SAAAU,GACjBS,EAAWC,EAAKjB,GAAIO,GACpBW,EAAQ,CACJlB,GAAI,KACJO,MAAO,QAQRM,EAAMM,KAAI,SAACC,EAAMC,GAAP,OACb,yBACAzB,UAAWwB,EAAKE,WAAa,oBAAsB,WAAWC,IAAKF,GAE/D,yBAAKE,IAAKH,EAAKpB,GAAIwB,QAAS,kBAAMV,EAAaM,EAAKpB,MAC/CoB,EAAKhB,MAEV,yBAAKR,UAAU,SACX,kBAAC,IAAD,CACA4B,QAAS,kBAAMT,EAAWK,EAAKpB,KAC/BJ,UAAU,gBACV,kBAAC,IAAD,CACA4B,QAAS,kBAAMN,EAAQ,CAAClB,GAAIoB,EAAKpB,GAAIO,MAAOa,EAAKhB,QACjDR,UAAU,oBCeX6B,MA/Cf,WAAqB,IAAD,EACUrC,mBAAS,IADnB,mBACTyB,EADS,KACFa,EADE,KAsChB,OACI,6BACI,gEACA,kBAAC,EAAD,CAAU7B,SArCF,SAAAuB,GACZ,GAAIA,EAAKhB,OAAQ,QAAQuB,KAAKP,EAAKhB,MAAnC,CAIA,IAAMwB,EAAQ,CAAIR,GAAJ,mBAAaP,IAE3Ba,EAASE,OA+BL,kBAAC,EAAD,CAAMf,MAAOA,EAAOC,aAdP,SAAAd,GACjB,IAAI6B,EAAehB,EAAMM,KAAI,SAAAC,GAIzB,OAHIA,EAAKpB,KAAOA,IACZoB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXM,EAASG,IAO2Cd,WApBrC,SAAAf,GACf,IAAM8B,EAAY,YAAIjB,GAAOkB,QAAO,SAAAX,GAAI,OAAIA,EAAKpB,KAAOA,KAExD0B,EAASI,IAiBmEd,WA5B7D,SAACgB,EAAQC,GACpBA,EAAS7B,OAAQ,QAAQuB,KAAKM,EAAS7B,OAI3CsB,GAAS,SAAAQ,GAAI,OAAIA,EAAKf,KAAI,SAAAgB,GAAI,OAAKA,EAAKnC,KAAOgC,EAASC,EAAWE,aCX5DC,MARf,WACE,OACE,yBAAKxC,UAAU,YACb,kBAAC,EAAD,QCHNyC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.4ff21c95.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n// import { usedId } from 'react-id-generator'\n\nfunction TodoForm(props) {\n    const [input, setInput] = useState('')\n\n    const inputRef = useRef('')\n\n    useEffect (() => {\n        inputRef.current.focus()\n    })\n\n    const handleChange = e => {\n        setInput(e.target.value)\n    }\n\n    // Pra evitar que a pagina de reload. peguei isso de um vídeo.\n    const handleSubmit = e => {\n        e.preventDefault()\n\n        // Ao submeter geral um ID, tentar usar algo da biblioteca react id generator\n        props.onSubmit({\n            // id: usedId(),\n            id: Math.floor(Math.random()*1000),\n            text: input\n        })\n\n        setInput('')\n    }\n\n    return (\n        <form className='todo-form' onSubmit={handleSubmit}>\n\n            <input\n            type='text'\n            placeholder='Adicione uma tarefa'\n            value={input}\n            name='text'\n            className='todo-input'\n            onChange={handleChange}\n            ref={inputRef}\n            />\n\n            <button className='todo-button'>Adicionar</button>\n\n        </form>\n    )\n}\n\nexport default TodoForm\n","import React, { useState } from 'react'\nimport TodoForm from './TodoForm'\nimport { RiCloseCircleLine } from 'react-icons/ri'\nimport { TiEdit } from 'react-icons/ti'\n\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    })\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value)\n        setEdit({\n            id: null,\n            value: ''\n        })\n    }\n\n    if (edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n\n    return todos.map((todo, index) => (\n        <div\n        className={todo.isComplete ? 'todo-row complete' : 'todo-row'}key={index}\n        >\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n                {todo.text}\n            </div>\n            <div className='icons'>\n                <RiCloseCircleLine\n                onClick={() => removeTodo(todo.id)}\n                className='delete-icon'/>\n                <TiEdit\n                onClick={() => setEdit({id: todo.id, value: todo.text})}\n                className='edit-icon'\n                />\n            </div>\n        </div>\n    ))\n}\n\nexport default Todo\n","import React, { useState } from 'react'\nimport TodoForm from './TodoForm'\nimport Todo from './Todo'\n\nfunction TodoList() {\n    const [todos, setTodos] = useState([])\n\n    // achado no stack overflow para não fazer input de entradas que só tenham espaços.\n    const addTodo = todo => {\n        if(!todo.text || /^\\s*$/.test(todo.text)){\n            return\n        }\n\n        const newTodos = [todo, ...todos]\n\n        setTodos(newTodos)\n    }\n\n    const updateTodo = (todoId, newValue) => {\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\n            return\n        }\n\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\n    }\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id)\n\n        setTodos(removeArr)\n    }\n\n    const completeTodo = id =>{\n        let updatedTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete\n            }\n            return todo\n        })\n        setTodos(updatedTodos)\n    }\n\n    return (\n        <div>\n            <h1>Quais são as tarefas de hoje?</h1>\n            <TodoForm onSubmit={addTodo}/>\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}/>     \n        </div>\n    )\n}\n\nexport default TodoList\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}